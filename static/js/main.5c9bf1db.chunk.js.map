{"version":3,"sources":["components/SidebarHeader.tsx","context/context.tsx","components/Sidebar.tsx","components/TabBtn.tsx","components/Table.tsx","util/countAge.ts","components/TableRow.tsx","components/Tab.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SidebarHeader","className","PatientContext","createContext","Sidebar","patient","useContext","name","age","diagnosis","TabBtn","text","setTab","activeTab","tabName","numberOfPatients","onClick","Table","tableName","children","calculateAge","birthday","ageDifMs","Date","now","parse","ageDate","Math","abs","getUTCFullYear","TableRow","props","item","historyNumber","firstName","lastName","birthDate","bedNumber","cause","activeRow","setActiveRow","setPatient","key","Tab","useState","presents","setPresent","released","setReleased","useEffect","fetchPresents","a","axios","result","data","fetchReleased","length","map","App","Boolean","window","location","hostname","match","ReactDOM","render","Provider","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c9bf1db.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function SidebarHeader() {\r\n    return (\r\n        <div className=\"sidebar__header\">Информация о пациенте\r\n        </div>\r\n    )\r\n}\r\n","import React, { createContext, useState} from \"react\";\r\n\r\n\r\ninterface IPatient{\r\n    name:string\r\n    age:number|null \r\n    diagnosis:string\r\n}\r\n\r\ninterface IAction{\r\n    type:string\r\n    payload:any\r\n}\r\n\r\nexport const PatientContext = createContext<any>({})\r\n\r\n\r\nexport function PatientProvider(props:JSX.ElementChildrenAttribute):JSX.Element{\r\n    const [patient, setPatient] = useState({})\r\n\r\n    return <PatientContext.Provider value={{patient, setPatient}}>\r\n        {props.children}\r\n    </PatientContext.Provider>\r\n}","import React, { useContext } from 'react'\r\nimport SidebarHeader from './SidebarHeader'\r\nimport { PatientContext } from '../context/context'\r\n\r\nexport default function Sidebar() {\r\n  const {patient} = useContext(PatientContext);\r\n    return (\r\n                <aside className='sidebar'>\r\n                   <SidebarHeader /> \r\n        <div className='sidebar__panel patient-info'>\r\n            <div className='patient-info__item'> \r\n            <span >ФИО</span>\r\n            <div className='patient-info__value'> {patient.name}</div> \r\n            </div>\r\n            <div className='patient-info__item' >\r\n            <span >Возраст</span>\r\n            <div className='patient-info__value'>{patient.age} </div>\r\n            </div>\r\n          <div className=\"patient-info__item\">\r\n          <span >Диагноз</span>\r\n            <div className='patient-info__value'>\r\n            {patient.diagnosis}\r\n            </div>\r\n          </div>\r\n          </div>\r\n          </aside>\r\n    )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\n\r\n\r\ntype TabBtnProps = {\r\n    text:string\r\n    setTab:(event: React.MouseEvent<HTMLButtonElement>)=>void\r\n    activeTab:string\r\n    tabName:string\r\n    numberOfPatients:number\r\n}\r\n\r\n const TabBtn : FunctionComponent<TabBtnProps> = ({text, setTab, activeTab, tabName, numberOfPatients})=> {\r\n    let className = 'tab-btn '\r\n    if(activeTab === tabName){\r\n        className+=' tab-btn__active'\r\n    }\r\n    return (\r\n    <button className={className} onClick={setTab}>{text}({numberOfPatients})</button>\r\n    )\r\n}\r\n\r\nexport default TabBtn;","import React, { FunctionComponent } from 'react'\r\n\r\ntype tableProps = {\r\n    tableName:string\r\n    activeTab:string\r\n}\r\nconst Table:FunctionComponent<tableProps> = ({activeTab, tableName, children})=> {\r\n    let className = 'patients-table'\r\n    if(activeTab === tableName){\r\n        className+=' patients-table__active'\r\n    }\r\n    return (\r\n        <table className={className} >\r\n               {children}\r\n        </table>\r\n     \r\n    )\r\n}\r\n\r\nexport default Table;","export function calculateAge(birthday:string) { \r\n    var ageDifMs = Date.now() - Date.parse(birthday); // parse string to miliseconds\r\n    var ageDate = new Date(ageDifMs); // miliseconds from epoch\r\n    return Math.abs(ageDate.getUTCFullYear() - 1970);\r\n}","import React, { useContext } from 'react'\r\nimport {IPatient} from '../interface/interface';\r\nimport { PatientContext } from '../context/context';\r\nimport {calculateAge} from '../util/countAge';\r\n\r\ninterface props{\r\n    item:IPatient\r\n    setActiveRow:Function\r\n    activeRow:number\r\n}\r\n\r\nexport default function TableRow(props:props) {\r\n    const {historyNumber, firstName, lastName, birthDate,  diagnosis, bedNumber, cause} = props.item;\r\n    const {activeRow, setActiveRow} = props;    \r\n    const {setPatient} = useContext(PatientContext)\r\n\r\n    \r\n    const handleClick = ()=>{\r\n        //onclick we set clobal user info state via context API\r\n        setPatient({\r\n            name:firstName + lastName,\r\n            age:calculateAge(birthDate),\r\n            diagnosis:diagnosis\r\n            })\r\n        // and add active css class \r\n            setActiveRow(historyNumber)\r\n    }\r\n    let className = '';\r\n    if(activeRow === historyNumber){\r\n        className ='active'\r\n    }\r\n    return (\r\n            <tr  className={className} key={historyNumber} onClick={()=>handleClick()}>\r\n                <td>{historyNumber}</td>\r\n                <td>{`${firstName} ${lastName}`}</td>\r\n                {cause ?\r\n                    <td>{cause}</td>\r\n                    : \r\n                    <td>{bedNumber}</td>}\r\n            </tr>\r\n        \r\n    )\r\n}\r\n","import React, { useState, useEffect} from 'react'\r\nimport TabBtn from './TabBtn'\r\nimport Table from './Table'\r\nimport axios from 'axios';\r\n\r\nimport {IPatient} from '../interface/interface';\r\nimport TableRow from './TableRow';\r\n\r\n\r\n\r\nexport default function Tab() {\r\n    const [activeTab, setTab] = useState('present')\r\n    const [activeRow, setActiveRow] = useState(0);\r\n    // array of patients in hospital\r\n    const [presents,setPresent ] = useState([])\r\n    //array of released patients \r\n    const [released, setReleased] = useState([])\r\n    \r\n    useEffect(() => {\r\n        //fetch remaining patients \r\n        const fetchPresents = async () =>{\r\n            const result = await axios(\r\n                'https://my-json-server.typicode.com/TenzenIga/fake-json/present',\r\n            );\r\n            setPresent(result.data)\r\n        };\r\n\r\n        //fetch released patients \r\n        const fetchReleased = async () =>{\r\n            const result = await axios(\r\n                'https://my-json-server.typicode.com/TenzenIga/quit/quit',\r\n            );\r\n            setReleased(result.data)\r\n        };\r\n        fetchPresents()\r\n        fetchReleased()\r\n     },[] )\r\n     \r\n    return (\r\n        <div className=\"tab\">\r\n        <div className=\"tab__controller\">\r\n          <TabBtn text=\"Присутствуют\" setTab = {()=>setTab('present')} activeTab = {activeTab} tabName='present' numberOfPatients={presents.length} />\r\n          <TabBtn text=\"Выбывшие\" setTab = {()=>setTab('released')} activeTab = {activeTab} tabName='released' numberOfPatients={released.length} />\r\n          </div>     \r\n          <Table activeTab = {activeTab} tableName='present' >\r\n                  <thead>\r\n                 <tr >\r\n                  <th>№ ИБ</th>\r\n                  <th>ФИО</th>\r\n                  <th>Палата</th>\r\n                </tr>\r\n                 </thead>\r\n          <tbody>\r\n                {presents.map((item:IPatient)=> <TableRow key={item.historyNumber} item={item}  activeRow={activeRow} setActiveRow={setActiveRow} /> )}   \r\n            </tbody>\r\n        </Table>\r\n          <Table activeTab = {activeTab} tableName='released'>\r\n          <thead>\r\n                 <tr >\r\n                  <th>№ ИБ</th>\r\n                  <th>ФИО</th>\r\n                  <th>Причина выбытия</th>\r\n                </tr>\r\n                 </thead>\r\n          <tbody>\r\n          {released.map((item:IPatient)=> <TableRow key={item.historyNumber} item={item}  activeRow={activeRow} setActiveRow={setActiveRow} /> )}\r\n        </tbody>\r\n        </Table> \r\n</div>\r\n    )\r\n}\r\n","import React from 'react';\n\nimport './App.css';\nimport Sidebar from './components/Sidebar';\nimport Tab from './components/Tab';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Sidebar />\n      <Tab / >\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { PatientProvider } from './context/context';\n\n\nReactDOM.render(\n<PatientProvider>\n    <App />\n</PatientProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}